 Erc20:

arb 0x50A88E22fBcC9b5B313496C41dfFBF78A0729465

base 0x382DA47716A43FA97E939230911EDb89995E4749

op 0x8216bB0dbcc9251dA5790ecD2c75E392461A227a

eth 0xB38d44c98e001195c017F6EF7645b5737579080f

pol 0x2196af16Afd601C605CBeE1d9f24dB9a3aE58817

uni 0x79919862484Ef7a62E1FE2519B23ddb1EE860F28

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract UNIFLYPoolLauncher is ReentrancyGuard {

    address public constant UNISWAP_V2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;
    address public constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    
    address public constant UNI = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // UNI token address on mainnet
    address public constant FLY = 0xB38d44c98e001195c017F6EF7645b5737579080f; // FLY token address (hypothetical)

    IUniswapV2Router02 public immutable uniswapRouter;
    IUniswapV2Factory public immutable uniswapFactory;

    constructor() {
        uniswapRouter = IUniswapV2Router02(UNISWAP_V2_ROUTER);
        uniswapFactory = IUniswapV2Factory(UNISWAP_V2_FACTORY);
    }

    /**
     * @dev Creates a new UNI/FLY pair on Uniswap V2 if it doesn't exist, then adds liquidity to it.
     * @param amountUNIDesired Amount of UNI tokens to add to the pool.
     * @param amountFLYDesired Amount of FLY tokens to add to the pool.
     * @param amountUNIMin Minimum amount of UNI tokens to add, protects against slippage.
     * @param amountFLYMin Minimum amount of FLY tokens to add, protects against slippage.
     * @param to Address where liquidity tokens will be sent.
     * @param deadline Timestamp after which this transaction will revert if not completed.
     */
    function launchAndAddLiquidity(
        uint amountUNIDesired,
        uint amountFLYDesired,
        uint amountUNIMin,
        uint amountFLYMin,
        address to,
        uint deadline
    ) external nonReentrant returns (address pair, uint amountUNI, uint amountFLY, uint liquidity) {
        // Ensure the pair exists, if not, create it
        pair = uniswapFactory.getPair(UNI, FLY);
        if (pair == address(0)) {
            pair = uniswapFactory.createPair(UNI, FLY);
        }

        // Transfer tokens from the sender to this contract
        require(IERC20(UNI).transferFrom(msg.sender, address(this), amountUNIDesired), "Transfer from failed for UNI");
        require(IERC20(FLY).transferFrom(msg.sender, address(this), amountFLYDesired), "Transfer from failed for FLY");

        // Approve router to spend tokens
        IERC20(UNI).approve(UNISWAP_V2_ROUTER, amountUNIDesired);
        IERC20(FLY).approve(UNISWAP_V2_ROUTER, amountFLYDesired);

        // Add liquidity
        (amountUNI, amountFLY, liquidity) = uniswapRouter.addLiquidity(
            UNI,
            FLY,
            amountUNIDesired,
            amountFLYDesired,
            amountUNIMin,
            amountFLYMin,
            to,
            deadline
        );

        // Return any excess tokens to the sender
        uint excessUNI = amountUNIDesired - amountUNI;
        uint excessFLY = amountFLYDesired - amountFLY;
        if (excessUNI > 0) require(IERC20(UNI).transfer(msg.sender, excessUNI), "Excess UNI transfer failed");
        if (excessFLY > 0) require(IERC20(FLY).transfer(msg.sender, excessFLY), "Excess FLY transfer failed");

        // Return the pair address for further interaction
        return (pair, amountUNI, amountFLY, liquidity);
    }
}
