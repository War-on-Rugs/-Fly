// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract UNIFLYPoolInteraction {
    address public constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    address public constant FLY_TOKEN_ADDRESS = 0x50A88E22fBcC9b5B313496C41dfFBF78A0729465;
    
    address private constant UNI = 0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0;
    address private constant FLY = 0x50A88E22fBcC9b5B313496C41dfFBF78A0729465;
    address private constant UNIFLY_POOL = 0x...; // Define this address

    IUniswapV2Router02 public immutable uniswapRouter;

    constructor() public {
        uniswapRouter = IUniswapV2Router02(UNISWAP_V2_ROUTER);
    }

    function addLiquidityToUNIFLY(
        uint amountUNIDesired,
        uint amountFLYDesired,
        uint amountUNIMin,
        uint amountFLYMin,
        address to,
        uint deadline
    ) public returns (uint amountUNI, uint amountFLY, uint liquidity) {
        // Implementation as provided in the original contract
    }

    function removeLiquidityFromUNIFLY(
        uint liquidity,
        uint amountUNIMin,
        uint amountFLYMin,
        address to,
        uint deadline
    ) public returns (uint amountUNI, uint amountFLY) {
        // Implementation as provided in the original contract
    }
}
    ) external returns (uint amountUNI, uint amountFLY, uint liquidity) {
        // Transfer tokens from the sender to this contract
        require(IERC20(UNI).transferFrom(msg.sender, address(this), amountUNIDesired), "Transfer from failed for UNI");
        require(IERC20(FLY).transferFrom(msg.sender, address(this), amountFLYDesired), "Transfer from failed for FLY");

        // Approve router to spend tokens
        IERC20(UNI).approve(UNISWAP_V2_ROUTER, amountUNIDesired);
        IERC20(FLY).approve(UNISWAP_V2_ROUTER, amountFLYDesired);

        // Add liquidity
        (amountUNI, amountFLY, liquidity) = uniswapRouter.addLiquidity(
            UNI,
            FLY,
            amountUNIDesired,
            amountFLYDesired,
            amountUNIMin,
            amountFLYMin,
            to,
            deadline
        );

        // Return any excess tokens to the sender
        uint excessUNI = amountUNIDesired - amountUNI;
        uint excessFLY = amountFLYDesired - amountFLY;
        if (excessUNI > 0) IERC20(UNI).transfer(msg.sender, excessUNI);
        if (excessFLY > 0) IERC20(FLY).transfer(msg.sender, excessFLY);
    }

    // Function to remove liquidity from the UNI/FLY pool
    function removeLiquidityFromUNIFLY(
        uint liquidity,
        uint amountUNIMin,
        uint amountFLYMin,
        address to,
        uint deadline
    ) external returns (uint amountUNI, uint amountFLY) {
        // Transfer liquidity tokens from sender to this contract
        IERC20(UNIFLY_POOL).transferFrom(msg.sender, address(this), liquidity);

        // Approve router to spend liquidity tokens
        IERC20(UNIFLY_POOL).approve(UNISWAP_V2_ROUTER, liquidity);

        // Remove liquidity
        (amountUNI, amountFLY) = uniswapRouter.removeLiquidity(
            UNI,
            FLY,
            liquidity,
            amountUNIMin,
            amountFLYMin,
            to,
            deadline
        );
    }
}
